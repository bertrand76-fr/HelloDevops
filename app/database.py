import os
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

# âœ… Variable globale pour suivre si les tables ont Ã©tÃ© crÃ©Ã©es
TABLES_CREATED = False  

# âœ… DÃ©tection du mode test avec une variable d'environnement
IS_TEST = os.getenv("TEST_MODE", "0") == "1"

if IS_TEST:
    DATABASE_URL = "sqlite:///:memory:"  # âœ… SQLite pour les tests
    print("ðŸš€ Mode TEST activÃ© : utilisation de SQLite en mÃ©moire")
else:
    DATABASE_URL = "postgresql://user:password@localhost:5432/mydb"  # âœ… PostgreSQL en production
    print(f"âœ… Mode PRODUCTION : connexion Ã  {DATABASE_URL}")

# âœ… CrÃ©ation de l'engine SQLAlchemy
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False} if IS_TEST else {})

# âœ… CrÃ©ation de la session SQLAlchemy
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

# âœ… DÃ©finition de la base dÃ©clarative
Base = declarative_base()



# âœ… Fonction pour rÃ©cupÃ©rer une session DB
def get_db():
    global TABLES_CREATED
    db = SessionLocal()

    try:
        if IS_TEST and not TABLES_CREATED :  # âœ… Si on est en test, s'assurer que la table existe
            Base.metadata.create_all(bind=engine)
            #TABLES_CREATED = True  # âœ… Indiquer que les tables existent dÃ©jÃ ""
                          
        yield db
    finally:
        db.close()
