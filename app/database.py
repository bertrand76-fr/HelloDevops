import os
import time
from sqlalchemy import create_engine, text
from sqlalchemy.orm import declarative_base, sessionmaker
import subprocess

# ‚úÖ Variable globale pour suivre si les tables ont √©t√© cr√©√©es
TABLES_CREATED = False  

# ‚úÖ D√©tection du mode test avec une variable d'environnement
IS_TEST = os.getenv("TEST_MODE", "0") == "1"

if IS_TEST:
    DATABASE_URL = "sqlite:///:memory:"  # ‚úÖ SQLite pour les tests
    print("üöÄ Mode TEST activ√© : utilisation de SQLite en m√©moire")
else:
    # ‚úÖ Connexion √† PostgreSQL Azure
    POSTGRES_USER = os.getenv("POSTGRES_USER", "devopsadmin")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "devopsadmin")
    POSTGRES_SERVER = os.getenv("POSTGRES_SERVER", "hellodevops-db-postgres")
    POSTGRES_SERVER_SUFFIX = os.getenv("POSTGRES_SERVER_SUFFIX", ".postgres.database.azure.com")
    POSTGRES_DB = os.getenv("POSTGRES_DB", "postgres")
    RESOURCE_GROUP = os.getenv("AZURE_RESOURCE_GROUP", "DevopsDeploymentManuelRG")

    DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}{POSTGRES_SERVER_SUFFIX}:5432/{POSTGRES_DB}?sslmode=require"
    print(f"‚úÖ Mode PRODUCTION : connexion √† {POSTGRES_SERVER}{POSTGRES_SERVER_SUFFIX}")

    # DATABASE_URL = "postgresql://user:password@localhost:5432/mydb"  # ‚úÖ PostgreSQL en production
    # print(f"‚úÖ Mode PRODUCTION : connexion √† {DATABASE_URL}")

# ‚úÖ Cr√©ation de l'engine SQLAlchemy
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False} if IS_TEST else {})

# ‚úÖ Cr√©ation de la session SQLAlchemy
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

# ‚úÖ D√©finition de la base d√©clarative
Base = declarative_base()

# ‚úÖ Fonction pour v√©rifier si PostgreSQL est en ligne
def is_postgres_running():
    try:
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            return result.fetchone() is not None
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur de connexion √† PostgreSQL : {e}")
        return False

# ‚úÖ Fonction pour red√©marrer PostgreSQL Azure
def restart_postgres():
    print("üîÑ Tentative de red√©marrage du serveur PostgreSQL via Azure CLI...")
    restart_command = f"az postgres flexible-server start --name {POSTGRES_SERVER} --resource-group {RESOURCE_GROUP}"
    
    try:
        subprocess.run(restart_command, shell=True, check=True)
        print("‚úÖ Serveur PostgreSQL red√©marr√© avec succ√®s !")
        time.sleep(20)  # ‚è≥ Attendre 20 secondes que le serveur red√©marre compl√®tement
    except Exception as e:
        print(f"‚ùå √âchec du red√©marrage de PostgreSQL : {e}")


"""
# ‚úÖ Fonction pour r√©cup√©rer une session DB
def get_db():
    global TABLES_CREATED
    db = SessionLocal()

    try:
        if IS_TEST and not TABLES_CREATED :  # ‚úÖ Si on est en test, s'assurer que la table existe
            Base.metadata.create_all(bind=engine)
            #TABLES_CREATED = True  # ‚úÖ Indiquer que les tables existent d√©j√†""
                          
        yield db
    finally:
        db.close()
"""
# ‚úÖ Fonction pour r√©cup√©rer une session DB avec support de test
def get_db():
    global TABLES_CREATED
    db = None
    if IS_TEST:  # üöÄ En test, s'assurer que la table existe
        db = SessionLocal()
    else:

        max_retries = 3  # üîÑ Nombre maximum de tentatives de reconnexion
        attempt = 0

        while attempt < max_retries:
            if is_postgres_running():
                db = SessionLocal()
                break
            else:
                print(f"‚ö†Ô∏è PostgreSQL est inactif. Tentative de red√©marrage ({attempt + 1}/{max_retries})...")
                restart_postgres()
                time.sleep(10)  # ‚è≥ Attendre avant de r√©essayer
                attempt += 1

        if db is None:
            raise Exception("‚ùå Impossible de se connecter √† PostgreSQL apr√®s plusieurs tentatives.")

    try:
        if IS_TEST:  # üöÄ En test, s'assurer que la table existe
            Base.metadata.create_all(bind=engine)
                          
        yield db
    finally:
        db.close()