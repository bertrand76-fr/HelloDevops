#!/bin/bash

# ðŸ”¹ Configuration des variables
RESOURCE_GROUP="DevopsDeploymentManuelRG"
AUTOMATION_ACCOUNT="AutoShutdownPostgres"
RUNBOOK_NAME="ShutdownPostgres"
SERVER_NAME="hellodevops-db-postgres"
LOCATION="West US 3"  # Adapter si nÃ©cessaire

echo "ðŸš€ DÃ©ploiement d'Azure Automation pour arrÃªt programmÃ© de PostgreSQL..."

az extension add --upgrade -n automation

# ðŸ”¹ VÃ©rifier si l'Automation Account existe dÃ©jÃ 
EXISTING_ACCOUNT=$(az automation account show --name $AUTOMATION_ACCOUNT --resource-group $RESOURCE_GROUP --query "name" -o tsv 2>/dev/null)

if [ -z "$EXISTING_ACCOUNT" ]; then
    echo "ðŸ”¹ CrÃ©ation de l'Automation Account..."
    az automation account create \
        --name $AUTOMATION_ACCOUNT \
        --resource-group $RESOURCE_GROUP \
        --location "$LOCATION"
else
    echo "âœ… L'Automation Account existe dÃ©jÃ ."
fi

# ðŸ”¹ VÃ©rifier si le Runbook existe dÃ©jÃ 
EXISTING_RUNBOOK=$(az automation runbook show --automation-account-name $AUTOMATION_ACCOUNT --resource-group $RESOURCE_GROUP --name $RUNBOOK_NAME --query "name" -o tsv 2>/dev/null)

if [ -z "$EXISTING_RUNBOOK" ]; then
    echo "ðŸ”¹ CrÃ©ation du Runbook..."
    az automation runbook create \
        --automation-account-name $AUTOMATION_ACCOUNT \
        --resource-group $RESOURCE_GROUP \
        --name $RUNBOOK_NAME \
        --type PowerShell \
        --description "ArrÃªte PostgreSQL toutes les heures"
else
    echo "âœ… Le Runbook existe dÃ©jÃ ."
fi

# ðŸ”¹ Ajouter le script PowerShell simplifiÃ© au Runbook
echo "ðŸ”¹ Mise Ã  jour du script PowerShell dans le Runbook..."
az automation runbook replace-content \
    --automation-account-name $AUTOMATION_ACCOUNT \
    --resource-group $RESOURCE_GROUP \
    --name $RUNBOOK_NAME \
    --content '
param (
    [string]$ResourceGroup = "'$RESOURCE_GROUP'",
    [string]$ServerName = "'$SERVER_NAME'"
)

# ðŸ”¹ VÃ©rifier le statut du serveur PostgreSQL
$Status = az postgres flexible-server show --name $ServerName --resource-group $ResourceGroup --query "state" -o tsv

if ($Status -eq "Ready") {
    Write-Output "ðŸ”¹ ArrÃªt du serveur PostgreSQL..."
    az postgres flexible-server stop --name $ServerName --resource-group $ResourceGroup
    Write-Output "âœ… Serveur PostgreSQL arrÃªtÃ©."
} else {
    Write-Output "âœ… PostgreSQL est dÃ©jÃ  arrÃªtÃ©."
}'

# ðŸ”¹ VÃ©rifier si la planification existe dÃ©jÃ 
EXISTING_SCHEDULE=$(az automation schedule show --automation-account-name $AUTOMATION_ACCOUNT --resource-group $RESOURCE_GROUP --name "ShutdownPostgresHourly" --query "name" -o tsv 2>/dev/null)

if [ -z "$EXISTING_SCHEDULE" ]; then
    echo "ðŸ”¹ CrÃ©ation de la planification..."
    az automation schedule create \
        --automation-account-name $AUTOMATION_ACCOUNT \
        --resource-group $RESOURCE_GROUP \
        --name "ShutdownPostgresHourly" \
        --description "ArrÃªte PostgreSQL toutes les heures" \
        --frequency Hour \
        --interval 1
else
    echo "âœ… La planification existe dÃ©jÃ ."
fi

# ðŸ”¹ Associer le Runbook Ã  la planification
echo "ðŸ”¹ Association du Runbook avec la planification..."
az automation job create \
    --automation-account-name $AUTOMATION_ACCOUNT \
    --resource-group $RESOURCE_GROUP \
    --runbook-name $RUNBOOK_NAME \
    --parameters ResourceGroup=$RESOURCE_GROUP ServerName=$SERVER_NAME

echo "âœ… DÃ©ploiement terminÃ© : PostgreSQL sera arrÃªtÃ© automatiquement toutes les heures ! ðŸš€"
